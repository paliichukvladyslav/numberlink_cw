/* cell.h - клітинка */
#ifndef CELL_H
#define CELL_H

#include <string>
#include "direction.h"

/* 
 * Cell представляє одну клітинку у сітці (клас Grid, див. grid.h).
 * Якщо сітка - граф, то Cell у ній - вершина.
 */
class Cell {
private:
	/*
	 * Символ ASCII, що міститься у клітинці.
	 * Значення ch впливає на те, як розуміє клітинку алгоритм:
	 * - буквено-цифрові знач. 'A'-'Z', '0'-'9' розуміються як такі, що треба з'єднати.
	 * - крапка '.' розуміється як порожня клітинка, через яку можливе проклад. шляху.
	 */
	char ch;
	
	/*
	 * Прапорець, що вказ., чи була клітинка вже відвідана під час обходу.
	 * Необхідний для уникнення зациклення та повторного проходження клітинки.
	 */
	bool visited;

	/*
	 * Чотири вказівники на сусідні клітинки
	 * у наступних чотирьох різних напрямках:
	 * - Північ (Cell *north)
	 * - Південь (Cell *south)
	 * - Захід (Cell *west)
	 * - Схід (Cell *east)
	 *
	 * Формують список суміжності клітинок сітки (вершин графа), де
	 * кожна клітинка зв'язана із кожною сусідньою клітинкою.
	 *
	 * Допустимим є значення NULL, якщо сусідньої клітинки нема.
	 */
	Cell *north, *south, *west, *east;

public:
	
	Cell(char char_to_set = '.');

	char get_char();
	void set_char(char char_to_set);

	Cell *cell_in_direction(Direction dir);

	bool is_visited();
	void set_visited(bool v);

	/*
	 * З'єднує напрямки двох різних клітинок разом.
	 * &targetCell - посилання на клітинку, з якою треба з'єднати поточну.
	 * Direction dir - напрямок, за яким знаходиться targetCell відносно поточної клітинки.
	 */
	void connect_to(Cell &targetCell, Direction dir);
};

#endif
